=======================================================================
C:\ABS\Projects\pathology-server\model\agents.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const agentSchema = new Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
  contact: { type: String, required: true },
  role: { type: String, default: "agent" },
  location: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Location",
    required: true,
  },
  franchise: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Franchise",
    required: true,
  },
  commissionPercentage: {
    type: Number,
    min: 0,
    max: 100,
    default: 20, // Default commission for the agent
  },
  lastLogin: { type: Date },
  lastLogout: { type: Date },
});

module.exports = mongoose.model("Agent", agentSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\appointment.js

const mongoose = require("mongoose");
const crypto = require("node:crypto");
const Agents = require("../model/agents");

const generateTicket = () => crypto.randomBytes(3).toString("hex");

const testSchema = new mongoose.Schema({
  test: { type: mongoose.Schema.Types.ObjectId, ref: "DiagnosticTest" },
  status: {
    type: String,
    enum: ["Pending", "In Progress", "Completed", "Closed"],
    default: "Pending",
  },

  updatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    refPath: "updatedByModel",
  },
  updatedByModel: {
    type: String,
    enum: ["User", "Franchise", "DiagnosticLab"],
  },
  updatedAt: {
    type: Date,
  },
});

const labSchema = new mongoose.Schema({
  lab: { type: mongoose.Schema.Types.ObjectId, ref: "Lab", required: true },
  tests: [testSchema],
});

// const commissionSchema = new mongoose.Schema({
//   superAdminToFranchise: { type: Number, min: 0, max: 100, default: 20 },
//   superAdminToAgent: { type: Number, min: 0, max: 100, default: 20 },
// });

const appointmentSchema = new mongoose.Schema(
  {
    type: { type: String, required: true },
    age: { type: Number, required: true },
    gender: { type: String, required: true },
    problem: { type: String, required: true },
    problemDescription: { type: String },
    referral: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Agent",
    },
    labs: labSchema,
    status: {
      type: String,
      enum: ["Pending", "Approve", "Reject"],
      default: "Pending",
    },
    appointmentDate: { type: Date },
    ticket: { type: String, default: generateTicket },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      refPath: "createdByModel",
    },
    createdByModel: {
      type: String,
      enum: ["User", "Agent", "Franchise", "SuperAdmin"],
    },
    franchise: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Franchise",
    },
    commission: {
      superAdminToAgent: {
        type: Number,
        default: function () {
          return this.referral ? this.referral.commissionPercentage : 0;
        },
      },
      superAdminToFranchise: {
        type: Number,
        default: function () {
          return this.franchise ? this.franchise.commissionPercentage : 0;
        },
      },
    },
    totalAmount: { type: Number, required: true },
  },
  { timestamps: true }
);

// Middleware to set franchise based on the agent
appointmentSchema.pre("save", async function (next) {
  try {
    if (this.referral && !this.franchise) {
      const agent = await Agents.findById(this.referral).populate("franchise");
      if (agent && agent.franchise) {
        this.franchise = agent.franchise._id;
      }
    }
    next();
  } catch (err) {
    next(err);
  }
});

const Appointment = mongoose.model("Appointment", appointmentSchema);
module.exports = Appointment;


=======================================================================
C:\ABS\Projects\pathology-server\model\diagnosticLabs.js

const mongoose = require("mongoose");
const DiagnosticLabSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
    },
    address: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Location",
      required: true,
    },
    contactNumber: {
      type: String,
      required: true,
    },
    image: {
      type: String,
    },
    isLabLogIn: {
      type: Boolean,
      default: false,
    },
    password: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      default: "lab",
    },
    testsOffered: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "DiagnosticTest",
      },
    ],
    handleView: { type: Boolean, default: false },
    lastLogin: { type: Date },
    lastLogout: { type: Date },
  },
  { timestamps: true }
);

const DiagnosticLab = mongoose.model("DiagnosticLab", DiagnosticLabSchema);

module.exports = DiagnosticLab;


=======================================================================
C:\ABS\Projects\pathology-server\model\diagnosticTest.js

const mongoose = require("mongoose");

const DiagnosticTestSchema = new mongoose.Schema({
  description: {
    type: String,
  },
  price: {
    type: Number,
    required: true,
  },
  labCategory: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "LabCategories",
  },
});

const DiagnosticTest = mongoose.model("DiagnosticTest", DiagnosticTestSchema);

module.exports = DiagnosticTest;


=======================================================================
C:\ABS\Projects\pathology-server\model\franchise.js

const mongoose = require("mongoose");

const franchiseSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    contactNumber: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: {
      type: String,
    },
    location: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Location",
      // required: true,
    },
    role: { type: String, default: "franchise" },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    lastLogin: { type: Date },
    lastLogout: { type: Date },
    commissionPercentage: {
      type: Number,
      min: 0,
      max: 100,
      default: 20,
    },
  },
  { timestamps: true }
);

const Franchise = mongoose.model("Franchise", franchiseSchema);

module.exports = Franchise;


=======================================================================
C:\ABS\Projects\pathology-server\model\labCategories.js

const mongoose = require("mongoose");

const LabCategoriesSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  image: {
    type: String,
  },
  profileImg: {
    type: String,
  },
});

const LabCategories = mongoose.model("LabCategories", LabCategoriesSchema);

module.exports = LabCategories;


=======================================================================
C:\ABS\Projects\pathology-server\model\location.js

const mongoose = require("mongoose");
const Schema = mongoose.Schema;

const locationSchema = new Schema({
  address: { type: String },
  city: { type: String },
  state: { type: String },
  pinCode: { type: String },
});

module.exports = mongoose.model("Location", locationSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\report.js

const mongoose = require("mongoose");

const reportSchema = new mongoose.Schema(
  {
    appointment: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Appointment",
      required: true,
    },
    details: {
      type: String,
    },
    file: {
      type: String,
      required: true,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Report", reportSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\saleRange.js

// model/salesRange.js

const mongoose = require("mongoose");

const salesRangeSchema = new mongoose.Schema({
  name: { type: String, required: true },
  minAmount: { type: Number, required: true },
  maxAmount: { type: Number, required: true },
  franchiseCommissionPercentage: { type: Number, required: true },
  agentCommissionPercentage: { type: Number, required: true },
});

module.exports = mongoose.model("SalesRange", salesRangeSchema);


=======================================================================
C:\ABS\Projects\pathology-server\model\userModel.js

const mongoose = require("mongoose");

const User = new mongoose.Schema(
  {
    name: {
      type: String,
      // required: true,
      // immutable: true,
    },
    mobile: {
      type: String,
      required: true,
      unique: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    password: { type: String, required: true },
    otp: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      enum: ["user", "franchise", "agent", "councilor", "superAdmin"],
      default: "user",
    },
    assignedCounselor: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      default: null,
    },
    adminDetails: {
      type: mongoose.Schema.Types.Mixed,
      default: {},
    },
    profileImage: {
      type: String,
    },
    lastLogin: { type: Date },
    lastLogout: { type: Date },
  },
  { timestamps: true }
);

// Pre-save middleware to handle mutable name field
User.pre("save", function (next) {
  if (this.isModified("name")) {
    this.schema.path("name").options.immutable = false; // Temporarily allow mutation
  }
  next();
});

User.post("save", function (doc, next) {
  if (doc.isModified("name")) {
    this.schema.path("name").options.immutable = true; // Restore immutability
  }
  next();
});

module.exports = mongoose.model("User", User);


